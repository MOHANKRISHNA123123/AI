def is_safe(board, row, col):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 1:
            return False
    
    # Check upper left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False
    
    # Check upper right diagonal
    for i, j in zip(range(row, -1, -1), range(col, len(board))):
        if board[i][j] == 1:
            return False
    
    return True

def solve_n_queens(board, row):
    n = len(board)
    
    # Base case: If all queens are placed, return True
    if row >= n:
        return True
    
    for col in range(n):
        if is_safe(board, row, col):
            # Place the queen
            board[row][col] = 1
            
            # Recur to place rest of the queens
            if solve_n_queens(board, row + 1):
                return True
            
            # Backtrack
            board[row][col] = 0
    
    return False

def print_board(board):
    n = len(board)
    for i in range(n):
        for j in range(n):
            print(board[i][j], end=" ")
        print()

def solve_8_queens():
    n = 8  # Number of queens and size of the chessboard
    board = [[0]*n for _ in range(n)]
    
    if solve_n_queens(board, 0):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution exists.")

# Solve the 8-Queens problem
solve_8_queens()
